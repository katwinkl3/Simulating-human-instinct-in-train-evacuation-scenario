;;; Callable state machines
;;; Version 2, 2012 Ilias Sakellariou

;;;  list of variables required for each turtle.
;;;  active-states ;; The current state of the world
;;;  active-states-code ;; The code defined for the specific state.
;;;  active-machines ;; List of reporters indicating which machine is active 
;;;  active-machine-names ;; list of active machine names

;;; state definition

;;; Loads the code of the state in memory
;;; Carefull sname#sm here is a string representing the state name.
;;; BUT the active state is a list (name mod). 
to load-state#sm [sname#sm]
    ;; loads only if we are at a different state
    if current-state-name#sm != sname#sm 
    [let states-matched#sm filter [state-name#sm ? = sname#sm] state-definition-of#sm  ;;  This loads all the code.   
     if empty? states-matched#sm [user-message (word "Error possibly incorrect state nane: " sname#sm ". Previous-state:: " current-state-name#sm) stop]
     set active-states-code fput state-code#sm first states-matched#sm but-first active-states-code;; select the first of the matched code.
     set active-states fput state-name-and-mode#sm first states-matched#sm but-first active-states  ;; remove the topmofthe stack and then put the new one.
     ] 
end 


to activate-machine#sm [machine-name#sm]
    ;; The new machine is on top
    set active-machines fput taskify#sm (word "state-def-of-" machine-name#sm) active-machines 
    set active-machine-names fput machine-name#sm active-machine-names
    ;; get the initial state in place
    push-state#sm init-state#sm
end

;;; push is deffent to load since the previous state is not removed.    
to push-state#sm [sname#sm]
     let states-matched#sm filter [state-name#sm ? = sname#sm] state-definition-of#sm  ;;  This loads all the code.  
     if empty? states-matched#sm [user-message (word "Error possibly incorrect state nane: " sname#sm ".") stop]
     set active-states-code fput state-code#sm first states-matched#sm active-states-code;; select the first of the matched code and add it.
     set active-states fput state-name-and-mode#sm first states-matched#sm active-states  ;; put the new state machine to the stack 
end

;; success 1 / fail 0 
;; unloading means that the machine is now off. So forget about it.
to deactivate-machine#sm [mode#sm]
    
    set active-states but-first active-states ; removing the current active state
    set active-states-code but-first active-states-code ; removing the current active state code

    let returning-machine first active-machine-names   ; keep the name 
    set active-machine-names but-first active-machine-names ;; kill the machine name  
    set active-machines but-first active-machines ; disabling the machine

    ; Functional can be sometimes nice! (this is from a logic programmer)
    set active-states fput (list current-state-name#sm 
     ifelse-value (mode#sm)
       [fput returning-machine remove returning-machine current-state-mode-true#sm]
       [remove returning-machine current-state-mode-true#sm]
     ifelse-value (mode#sm)
       [remove returning-machine current-state-mode-false#sm]  
       [fput returning-machine remove returning-machine current-state-mode-false#sm]
       )
         but-first active-states

end


;;; Reports the current state of the agent.
to-report current-state#sm
  report first active-states
end 

to-report current-state-name#sm
  report first current-state#sm
end

to-report current-state-mode-true#sm
  report item 1 current-state#sm
end

to-report current-state-mode-false#sm
  report item 2 current-state#sm
end

to-report current-state-code#sm
  report first active-states-code
end
;;;;;;;;;;;;;;;;;;;;;

;;; utilities to check previous states
to-report state-stack#sm
 report map first active-states 
end
;;; Reports true if the state that invoked the current state is 
;;; that of the parameter
to-report invoked-from [ state#sm ]
  let sts state-stack#sm
  report (length sts > 1 and item 1 sts = state#sm) 
end

;;; Reports true if the state of the parameter is active (in stack)
to-report previous-active-state [ state#sm ]
  report member? state#sm state-stack#sm
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init active-states as a list
;;; get the first as the active state
;;; Load it.
to initialise-state-machine
  ;; dummy states and dummy code was entered so that we have a uniform (and fast) load-state code.
  set active-states [["dumy-initial-state#sm" [] [] ]]
  set active-states-code ["dumy-code#sm"]
  set active-machines (list taskify#sm (word "state-def-of-" breed)) ;; init the primary machine
  set active-machine-names (list breed) ;; set the name of the active machine
  load-state#sm init-state#sm
end




;;; Main code for executing the state machine
to execute-state-machine
  let trans#sm filter [runresult first ?] current-state-code#sm ;; so only valid transitions are in list!
  ifelse not empty? trans#sm 
     [let current-transition first trans#sm   ; we pick up the first transition
      run trans-action#sm current-transition  ; action
      run trans-target#sm current-transition] ; change of state to target state
   [show (word "No state transition applicable from " current-state-name#sm)] 
end 

;;; does not work as yet
to check-code [br]
  ca 
  reset-ticks
  ;; Since the code must run in turtle context with all breed specific vars created
  ;; we create a "dummy" turtle of tyhe specific breed and check the code.
  run (word "create-" br " 1 ")
  ask turtle 0 [   
      show (word "Checking states for breed" br)   
      ;; load the code in a var
      let code#sm runresult (word "state-def-of-" br)
      let all-states#sm []
      ;; collects state definitions
      foreach code#sm [set all-states#sm lput state-name#sm ? all-states#sm] 
      ;; should add a case for dublicates
      ;; check if transitions lead to a valid state 
      foreach code#sm [check-a-state#sm ? all-states#sm]
      ;; Show the staes processed.
      show (word "States checked:: " all-states#sm) 
      die ;; the "dummy" says good bye.
      ]
end 

;;; no need to specify anything else. 
;;; takes the reporter created during machine init by other  
to-report state-definition-of#sm
     report runresult first active-machines
end 

;;; Check one state for invalid transitions
;;; Internal as the name indicates <>#sm
to check-a-state#sm [state-descr#sm all-states#sm]
  let sname#sm state-name#sm state-descr#sm
  foreach (but-first state-descr#sm) 
     [if (not member? (last ?) all-states#sm) 
      [show (word "From state::" sname#sm " transition to undefined state " (last ?))] ] 
end

;;; ((state-name true-list false-list) (cond action target_state) (cond action target_state))

;;; So the idea is to first make everything a list of strings and then 
;;; compile the code.

;;; State Data structure operations
to-report init-state#sm
  report  state-name#sm first runresult first active-machines
end 


;;; A transition is of the form (cond action target_state)
;;; transition manipulation reporters
to-report trans-condition#sm [trans#sm]
  report first trans#sm
end

;;; transition action
to-report trans-action#sm [trans#sm]
  report item 1 trans#sm
end 

;;; transistion target state
to-report trans-target#sm [trans#sm]
  report item 2 trans#sm
end

;;; state-manipulation reporters
to-report state-name#sm [state#sm]
  report first first state#sm
end

;;; A state has the form
;;; ((state-name true-list false-list) (cond action target_state) (cond action target_state))

;;; truelist
to-report state-mode-true#sm [state#sm]
  report item 1 state-name-and-mode#sm state#sm
end

;;; falselist
to-report state-mode-false#sm [state#sm]
  report item 2 state-name-and-mode#sm state#sm
end

;; report the name and mode information of the state
to-report state-name-and-mode#sm [state#sm]
  report first state#sm
end

;;; reports the code of the state  
to-report state-code#sm [state#sm]
  report but-first state#sm
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; State operators 
;;; Nice. Check out the lists that are true false.
to-report state [sname#sm incomplete-state#sm]
  report (fput (list sname#sm  [] [] )incomplete-state#sm)
end 

to-report end-state
  report []
end

to-report # [trans#sm statedef#sm]
  report fput trans#sm statedef#sm
end
;;; Condition Part of transition description
to-report when [action-condition#sm incomplete-state#sm]
  report fput taskify#sm action-condition#sm incomplete-state#sm
end 

to-report otherwise [incomplete-state#sm]
  report fput taskify#sm "true" incomplete-state#sm
end   
  
to-report on-success [machine#sm incomplete-state#sm]
  report fput taskify#sm (word "ifelse-value (member? \"" machine#sm "\" current-state-mode-true#sm) [true][false]") incomplete-state#sm
end 

to-report on-failure [machine#sm incomplete-state#sm]
  report fput taskify#sm (word "ifelse-value (member? \"" machine#sm "\" current-state-mode-false#sm) [true][false]") incomplete-state#sm
end   

to-report for-n-ticks [n incomplete-state]
  let t ticks + n
  ;;show (word "ticks:here:" t)
  report fput (task [ticks  < t]) incomplete-state
end   

to-report after-n-ticks [n incomplete-state]
  let t ticks + n
  ;;show (word "ticks:here:" t)
  report fput (task [ticks  > t]) incomplete-state
end   

;;; Action Part of transition description
  
to-report do [action#sm incomplete-state#sm]
  report fput taskify#sm action#sm incomplete-state#sm
end 

to nothing
end

;;; Transition part indicating target states 
to-report goto [sname#sm]
  report (list taskify#sm (word "load-state#sm " "\"" sname#sm "\"")) 
end

;; needs a bit of feeling up.
to-report activate-machine [sname#sm]
  report (list taskify#sm (word "activate-machine#sm " "\"" sname#sm "\"")) 
end

;; Sucess state - deactivates the machine and changes the status to 1
to-report success 
  report (list taskify#sm (word "deactivate-machine#sm true")) 
end

;; Fialure state - deactivates the machine and sets status to 0
to-report failure
  report (list taskify#sm (word "deactivate-machine#sm false"))
end

;;; Taskify Utility. 
to-report taskify#sm [what#sm]
  report runresult (word "task [" what#sm " ]")
end
  
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
